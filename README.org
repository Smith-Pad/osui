* OSUI
Introduction Later...

** Official Dependencies

- python-pip
	- flask
	- opencv-python
	- sh
	- mediapipe
	- SpeechRecognition
	- python-xlib

** Developing OSUI

Here are the instructions to prepare on development on OSUI.

*** Recommended Platforms to develop OSUI
- Ubuntu LTS/Latest +

  Ubuntu LTS/Latest is generally a recommended distribution that can be used for developing
  OSUI, however limited features are presented at the moment. Such as the software updating
  with pacman in the backend controlled by frontend.

  Here are the dependencies to install

  #+BEGIN_SRC shell
   sudo apt install python3
   sudo apt install python3-pip
  #+END_SRC

- Arch based Distributions +

  Arch based Distributions is the most recommended way to develop OSUI, since all the features
  of OSUI are only compatible to Arch Linux based distributions.

  Here are the dependencies and requirements to install.

  #+BEGIN_SRC shell
  sudo pacman -S python
  #+END_SRC

  **NOTE: Most arch based distributions should come with the latest version of python**

  #+BEGIN_SRC shell
  sudo pacman -S python-pip
  #+END_SRC

*** Better way to test out Smith-Pad's OSUI Desktop Environment

The better way to test out Smith-Pad's OSUI Desktop Environment and testing out the "full"
functionalities of the desktop environment is to use containers, preferably using a program
called distrobox, which is available in most distributions. However, running in a container
does not allow hardware control from frontend. However, this section will be updated, once
we discover something though.

**** Installing Distrobox

***** On Ubuntu/Debian based distros

#+BEGIN_SRC shell
sudo apt install podman
#+END_SRC

#+BEGIN_SRC shell
git clone https://github.com/89luca89/distrobox
cd distrobox
sh ./install
#+END_SRC

***** On Arch Based Distros

#+BEGIN_SRC shell
sudo pacman -S podman
#+END_SRC

#+BEGIN_SRC shell
git clone https://github.com/89luca89/distrobox
cd distrobox
sh ./install
#+END_SRC


***** On Fedora based Distros

#+BEGIN_SRC shell
sudo dnf install podman
#+END_SRC

#+BEGIN_SRC shell
git clone https://github.com/89luca89/distrobox
cd distrobox
sh ./install
#+END_SRC


**** Creating an Arch Linux Container

Here is how you create an Arch Linux Container.


#+BEGIN_SRC shell
distrobox create -i docker.io/archlinux:latest --init --name <name of container>
#+END_SRC

Then you enter in to the container you just created. :w

#+BEGIN_SRC shell
distrobox enter <name of container>
#+END_SRC


Then use the pacman command to make sure packages have been updated.

#+BEGIN_SRC shell
sudo pacman -Syyu
#+END_SRC

After that, use the pacman command to install the Python Pip Package Manager

#+BEGIN_SRC shell
sudo pacman -S python-pip
#+END_SRC

After that, use the pacman command to install git.

#+BEGIN_SRC shell
sudo pacman -S git
#+END_SRC

After that, run this script to install python dependencies that are needed for
running OSUI.

#+BEGIN_SRC shell
sh dependencies-install.sh
#+END_SRC

And then finally run python

#+BEGIN_SRC shell
python index.py
#+END_SRC


#+BEGIN_SRC shell
http://localhost:3000 or http://127.0.0.1:3000
#+END_SRC

** Installation

For the python dependencies, here are the list of dependencies that
are needed for the installation of the OSUI Desktop Environment

- ~pip install flask~

- ~pip install opencv-python~

- ~pip install sh~

- ~pip install mediapipe~

- ~pip install SpeechRecognition~

- ~pip install python-xlib~

  
However, if you want it to make it faster, it is recommended to run
the ~dependencies-install.sh~ script

#+BEGIN_SRC shell
sh dependencies-install.sh
#+END_SRC


** Usage:

#+BEGIN_SRC python
from flask import Flask, Response, render_template, Markup, request, jsonify
import speech_recognition as sr
import sh
import os
import subprocess
#+END_SRC


** What's in the backend?

*** Adjusting Sound Volume
For adjusting the volume in the status bar, it uses PulseAudio ~pactl~


**** Decreasing Sound Volume

#+BEGIN_SRC shell
pactl set-sink-volume @DEFAULT_SINK@ -10%
#+END_SRC


**** Increasing Sound Volume

#+BEGIN_SRC shell
pactl set-sink-volume @DEFAULT_SINK@ +10%
#+END_SRC


*** Adjusting Sound Volume
For adjusting the volume, in the backend, it uses BrightnessCTL ~brightnessctl~


**** Decreasing Display Brightness

#+BEGIN_SRC shell
brightnessctl set 10%-
#+END_SRC


**** Increasing Display Brightness

#+BEGIN_SRC shell
brightnessctl set +10%
#+END_SRC


** Sources:

https://github.com/89luca89/distrobox
